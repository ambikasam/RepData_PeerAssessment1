rm(list = l())
rm(list = ls())
library(datasets)
data(iris)
dim(iris)
str(iris)
iris$Sepal.Length
split(iris$Sepal.Length,iris$Species)
t <- split(iris$Sepal.Length,iris$Species)
t$virginica
mean(t$virginica)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
lapply(mtcars$mpg/mtcars/$cyl, mean)
lapply(mtcars$mpg/mtcars$cyl, mean)
lapply(mtcars$mpg/mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$hp,mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(split(mtcars$mpg, mtcars$cyl), mean)
t <- lapply(split(mtcars$mpg, mtcars$cyl), mean)
t$`4`
t$`8`
t$`4` - t$`8`
debug(ls)
ls
ls
debug(ls)
ls
ls()
a
envir
pos
2
3
name
all.names
pos
pos
pattern
name
envir
exit
quit
quit
library(datasets)
data(mtcars)
?mtcars
rm(list = ls())
library(datasets)
data(mtcars)
?mtcars
abs()
abs
? abs
abs(11.56364)
mtcars
split(mtcars$mpg,mtcars$cyl)
t <- split(mtcars$mpg,mtcars$cyl)
t[1]
t[3]
mean(t[1])
t[[1]]
t[[3]]
abs(mean(t[[3]]) - mean(t[[1]])
)
abs(mean(t[[3]]) - mean(t[[1]]))
t <- split(mtcars$hp,mtcars$cyl)
t
abs(mean(t[[3]]) - mean(t[[1]]))
library(datasets)
data(iris)
?iris
iris
split(iris$Sepal.Length,iris$Species)
split(iris$Sepal.Length,iris$Species)$virginica
sapply(split(iris$Sepal.Length,iris$Species)$virginica,mean)
sapply(split(iris$Sepal.Length,iris$Species)$virginica,mean)
mean(split(iris$Sepal.Length,iris$Species)$virginica)
apply(iris[, 1:4], 2, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
?set.seed
y <- c(1,2,3)
x <- c(1,2,3)
x1 <- c(1,2,3)
x2 <- c(1,2,3)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
by.total()
summaryRprof()
system.time(ls())
?system.time
system.time(matrix(stats::rnorm(90000), nrow=300, ncol=300))
?system.time
system.time(matrix(y <- stats::rnorm(9000000), nrow=3000, ncol=3000))
system.time(matrix(x1 <- stats::rnorm(9000000), nrow=3000, ncol=3000))
system.time(matrix(x2 <- stats::rnorm(9000000), nrow=3000, ncol=3000))
Rprof()
fit <- lm(y ~ x1 + x2)
summaryRprof()
?Rprof()
Rprof(NULL)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
?system.time
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
library("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
?dbListFields
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
?BiocUpgrade
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLite("BiocUpgrade")
biocLite("rhdf5")
y
y
biocLite("rhdf5")
biocLite("rhdf5")
biocLite("rhdf5")
biocLite("rhdf5")
biocLite("BiocUpgrade")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
?attr
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readB = h5read("example.h5","foo/foobaa/B")
readdf= h5read("example.h5","df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user","passwd"))
pg2
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user","passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
pg2 = GET(handle=google,path="search")
oauth_endpoints("github")
myapp <- oauth_app("github", "a598f1aad80301229a98")
myapp <- oauth_app("github", "4e0125e9e88dd55aa0e83c98732f3ef3cba1e63d")
myapp <- oauth_app("github", "a598f1aad80301229a98", "4e0125e9e88dd55aa0e83c98732f3ef3cba1e63d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "a598f1aad80301229a98", "4e0125e9e88dd55aa0e83c98732f3ef3cba1e63d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", "a598f1aad80301229a98", "4e0125e9e88dd55aa0e83c98732f3ef3cba1e63d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
setwd("/Users/ambika/gitDir/coursera/data-analysis/03-getting-and-cleaning-data"); system.time(source("run_analysis.R"))
setwd("/Users/ambika/gitDir/coursera/data-analysis/03-getting-and-cleaning-data"); system.time(source("run_analysis.R"))
dir()
getwd()
install.packages("data.table","plyr","reshape2")
install.packages("data.table", "plyr", "reshape2")
getwd()
setwd("/Users/ambika/gitDir/coursera/data-analysis/03-getting-and-cleaning-data/data/UCI HAR Dataset")
exit
q()
is.element("R.utils", installed.packages())
library("R.utils")
check_packages <- function(x) {
if (!isPackageInstalled(x)) install.packages(x)
}
check_packages("data.table")
check_packages("plyr")
check_packages("reshape2")
q()
pkgs=c("R.utils","data.table","plyr","reshape2")
remove.packages(pkgs, .libPaths())
if (!is.element("R.utils", installed.packages())) install.packages("R.utils")
library("R.utils")
check_load_packages <- function(x) {
message(c("installing ",x))
if (!isPackageInstalled(x)) { install.packages(x) }
library(x)
}
check_load_packages("data.table")
?library
x="reshape2"
library(x)
library(reshape2)
library("reshape2")
require(x)
require(reshape2)
gc()
pkgs=c("R.utils","data.table","plyr","reshape2")
remove.packages(pkgs, .libPaths())
?contrib.url
pkgs=c("R.utils","data.table","plyr","reshape2")
remove.packages(pkgs, .libPaths())
pkgs=c("R.utils","data.table","plyr","reshape2")
remove.packages(pkgs, .libPaths())
?plot
source('~/.active-rstudio-document', echo=TRUE)
head(filledData[[c("steps","date")]][is.na(activity[["steps"]])])
head(reorderFilledData[[c("steps","date")]][is.na(activity[["steps"]])])
head(is.na(activity[["steps"]]))
head(reorderFilledData[[c("steps","date")]])
head(reorderFilledData[[1:3]])
head(reorderFilledData[[1:2]])
head(reorderFilledData[[1]])
head(reorderFilledData[["steps"]])
head(reorderFilledData[is.na(activity[["steps"]])] )
head(reorderFilledData[,is.na(activity[["steps"]])] )
head(reorderFilledData[is.na(activity[["steps"]]),] )
head(activity[is.na(activity[["steps"]]),] )
sum(reorderFilledData[["steps"]][is.na(activity[["steps"]]),] )
sum(reorderFilledData[["steps"]][is.na(activity[["steps"]])] )
tapply(reorderFilledData[["steps"]][is.na(activity[["steps"]])], reorderFilledData$date, sum)
length(reorderFilledData[["steps"]][is.na(activity[["steps"]])])
tapply(reorderFilledData[["steps"]][is.na(activity[["steps"]])], reorderFilledData$date[is.na(activity[["steps"]])], sum)
